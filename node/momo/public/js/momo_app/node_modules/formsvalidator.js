'use strict' ;
require('jquery-1.8.1.min.js') ;

module.exports = Pkg.write('org.libspark.straw.forms', function(){
	
	function isValidEmailAddress(emailAddress) {
	    var pattern = new RegExp(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i);
	    return pattern.test(emailAddress);
	};
	
	
	/* MAIN NAJA FORMS VALIDATOR */
	var FormsValidator = Type.define({
		pkg:'::FormsValidator',
		inherits:EventDispatcher,
		domain:Type.appdomain,
		statics : {
			initialize:function(){
				FormsValidator.forms = new FormsValidator(window) ;
			},
			listen:function listen(type, closure){
				FormsValidator.forms.bind(type, closure) ;
				return this ;
			},
			discard:function discard(type, closure){
				FormsValidator.forms.unbind(type, closure) ;
				return this ;
			},
			isReady:function isReady(){
				return FormsValidator.ready === true ;
			},
			createClient:function createClient(url, func, method){
				
				FormsValidator.ajax = new AjaxCommand(url, function(s){
					FormsValidator.displaySuccess() ;
					func(s) ;
				}) ;
				
				return this ;
			},
			initForms:function initForms(target){
				FormsValidator.target = target ;
				
				FormsValidator.fields = target.find('.fline .input input, .fline .input textarea') ;
				FormsValidator.generate(FormsValidator.fields) ;
				FormsValidator.ready = true ;
				
				return this ;
			},
			reset:function reset(){
				FormsValidator.fields.each(function(i, el){$(el).attr('value', '').parent().removeClass('failure success')}) ;
				FormsValidator.initForms(FormsValidator.target) ;
				
				return this ;
			},
			generate:function generate(f){
				var arr = [] ;
				for(var i = 0, l = f.length ; i < l ; i++){
					var v = arr[i] = new FieldValidator(f[i]) ;
				}
				FormsValidator.validators = jQuery(arr) ;
				return this ;
			},
			validate:function validate(f){
				var s = FormsValidator.isReady() ;
				
				s = s && f(FormsValidator) ;
				
				if(s){
					FormsValidator.ajax.execute() ;
				}
				return s ;
			},
			displayError:function displayError(){ return this },
			displaySuccess:function displaySuccess(){ return this },
			destroy:function destroy(){
				FormsValidator.forms.destroy() ;
			}
		},
		constructor:FormsValidator = function FormsValidator(win){
			FormsValidator.base.apply(this, [win]) ;
		}
	}) ;
	
	var FieldValidator = Type.define({
		pkg:'::FieldValidator',
		domain:Type.appdomain,
		constructor:FieldValidator = function FieldValidator(field){
			FieldValidator.base.apply(this, [field]) ;
			
			this.field = $(field) ;
			
		},
		enable:function enable(cond){
			
						
			
		},
		check:function enable(cond){
			this.fieldValue = this.field.attr('value') ;
			
			var s = true ;
			if(this.isEmpty())
				s = false ;
			if(this.email && this.isNotValidEmail)
				s = false ;
			
			if(!! this.success && s) this.success(this.field[0]) ;
			if(!! this.failure && !(s)) this.failure(this.field[0]) ;
			
			return s ;
		},
		isTextarea:function isTextarea(){ return true },
		isTextfield:function isTextfield(){ return true },
		isSelect:function isSelect(){ return true },
		isCheckbox:function isCheckbox(){ return true },
		isRadio:function isRadio(){ return true },
		
		isEmpty:function isEmpty(){return this.fieldValue == ''},
		isNotEmpty:function isNotEmpty(){return this.fieldValue != ''},
		isNotValidEmail:function isNotValidEmail(){return !isValidEmailAddress(this.fieldValue)}
		
	}) ;
	
	
	
	return FormsValidator ;
	
})