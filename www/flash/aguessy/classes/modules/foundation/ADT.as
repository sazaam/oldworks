package modules.foundation {	import flash.utils.Dictionary;	/**	 * Abstract Data Type 	 * @author ...	 */	public class ADT extends Object	{			/**		 * @param	concrete			 */		public function ADT(concrete:Boolean=false) 		{			_concrete = concrete;			if (!_concrete) 				assertAbstractTypeError(this, Type.getClass(this));		}				/**		 * Declare a new Abstract class. Compare the specified instance constructor with the specified Class type.		 * We force the test in the specified class constructor if true throw the Abstract TypeError.		 * @param	instance	Object	-	This in the specified class constructor.		 * @param	T			Class 	-	The specified class which implements the abstract mechanic 		 */        public static function assertAbstractTypeError(instance:Object, T:Object):void        {            if ((T is Class || T is Function) && instance.constructor == T)                throw new TypeError("Runtime instantiation of " + Type.getClassPath(instance) + " is disallowed because "+ Type.getClassName(instance) + " is an Abstract data type");        }                protected var _concrete:Boolean;	}}